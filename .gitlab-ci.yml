variables:
  REGISTRY: "docker-hub.2gis.ru"

stages:
  - pre
  - dockerize
  - deploy
  - end

before_script:
  - export CI_TAG=`[[ -z ${CI_COMMIT_TAG} ]] && echo "branch-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA:0:8}" || echo "${CI_COMMIT_TAG}"`

# ================= Build, Test & Orleans Storage Up =================

build-apps:
  stage: pre
  when: always
  image: $REGISTRY/microsoft/dotnet:2.1.300-sdk-alpine3.7
  script:
    - dotnet restore --runtime debian-x64
    - dotnet publish src/Broadway.Host --configuration Release --runtime debian-x64 --output ../../publish/broadway-host
    - dotnet publish src/Broadway.Silo --configuration Release --runtime debian-x64 --output ../../publish/broadway-silo
  tags: [ 2gis, docker ]
  artifacts:
    name: "${CI_COMMIT_REF_NAME}_app"
    expire_in: '1 week'
    paths:
      - publish/broadway-host/
      - publish/broadway-silo/
  only:
    - master

storage-up:
  stage: pre
  when: always
  image: $REGISTRY/2gis-io/k8s-handle:latest
  script:
    - export DOMAIN_POSTFIX=broadway-${CI_COMMIT_REF_SLUG}
    - k8s-handle deploy --config config-prototype.yaml --section deploy-storage --sync-mode true --tries 120
  tags: [ 2gis, docker ]
  only:
    - master

# ================= Dockerize =================

broadway-host-image:
  stage: dockerize
#  when: manual
  allow_failure: false
  script:
    - export IMAGE_TAG=$REGISTRY/roads/broadway-host:${CI_TAG}
    - docker build --pull --rm --tag $IMAGE_TAG -f publish/broadway-host/Dockerfile publish/broadway-host
    - docker push $IMAGE_TAG
  tags: [ docker-engine, io ]
  dependencies:
    - build-apps
  only:
    - master

broadway-silo-image:
  stage: dockerize
#  when: manual
  allow_failure: false
  script:
    - export IMAGE_TAG=$REGISTRY/roads/broadway-silo:${CI_TAG}
    - docker build --pull --rm --tag $IMAGE_TAG -f publish/broadway-silo/Dockerfile publish/broadway-silo
    - docker push $IMAGE_TAG
  tags: [ docker-engine, io ]
  dependencies:
    - build-apps
  only:
    - master

# ================ Deploy =================

.deploy-testing:template: &deploy_testing_template
  image: $REGISTRY/2gis-io/k8s-handle:latest
  variables:
    DOMAIN_POSTFIX: "broadway-${CI_COMMIT_REF_SLUG}"
    ROADS_ENVIRONMENT: stage
    BROADWAY_VERSION: ${CI_TAG}
  before_script:
    - export ENVIRONMENT_KEYSPACE=`echo ${CI_COMMIT_REF_SLUG} | sed -e 's/-/_/g'`
  tags: [ 2gis, docker ]

deploy-staging:
  stage: deploy
#  when: manual
  image: $REGISTRY/2gis-io/k8s-handle:latest
  script:
    - export DOMAIN_POSTFIX=broadway-${CI_COMMIT_REF_SLUG}
    - export ENVIRONMENT_KEYSPACE=${CI_COMMIT_REF_SLUG}
    - export ROADS_ENVIRONMENT=stage
    - export BROADWAY_VERSION=${CI_TAG}
    - k8s-handle deploy --config config-prototype.yaml --section deploy-apps --sync-mode true --tries 60
  only:
    - master
  dependencies: []
  tags: [ 2gis, docker ]
  environment:
    name: broadway-prototype
    url: http://broadway-${CI_COMMIT_REF_SLUG}.web-staging.2gis.ru/swagger

deploy-testing:
  <<: *deploy_testing_template
  stage: deploy
  when: manual
  script:
    - export ENVIRONMENT_KEYSPACE=`echo ${CI_COMMIT_REF_SLUG} | sed -e 's/-/_/g'`
    - k8s-handle deploy --config config-prototype.yaml --section deploy-storage --sync-mode true --tries 120
    - k8s-handle deploy --config config-prototype.yaml --section deploy-apps --sync-mode true --tries 60
  except:
    - master
    - tags
  dependencies: []
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: http://broadway-${CI_COMMIT_REF_SLUG}.web-staging.2gis.ru/swagger
    on_stop: destroy-testing
  only:
    - master

destroy-testing:
  <<: *deploy_testing_template
  stage: deploy
  when: manual
  script:
    - k8s-handle destroy --config config-prototype.yaml --section deploy-apps --sync-mode true --tries 60
    - k8s-handle destroy --config config-prototype.yaml --section deploy-storage --sync-mode true --tries 60
    - pip install cassandra-driver
    - python run-cql.py ${CASSANDRA_STAGE_HOST} ${CASSANDRA_STAGE_PORT} "DROP KEYSPACE ${ENVIRONMENT_KEYSPACE}"
  dependencies: []
  environment:
    name: ${CI_COMMIT_REF_NAME}
    action: stop
  only:
    - master

# ================= End =================

.cleanup:registry:template: &cleanup_registry_template
  script:
    - echo 'Run docker registry images cleanup...'
    - export TAGS=`curl -sS -X GET https://$(REGISTRY)/v2/$(IMAGE)/tags/list --stderr - | docker run -i --rm $(REGISTRY)/2gis/jq:1.5 '.tags|.[]' --raw-output | grep "^$(TAG_MASK)"`
    - echo "Tags list for $(REGISTRY)/$(IMAGE):"
    - echo "$TAGS" | awk '{printf "%d) %s\n", NR, $$0}'
    - echo '========='
    - "[[ -z $TAGS ]] && exit 0"
    - export CURRENT_TIME=`date +%s`
    - >
      for TAG in $TAGS; do \
        IMAGE_CREATED=`curl -sS -X GET -H "Accept: application/vnd.docker.distribution.manifest.v1+json" https://$(REGISTRY)/v2/$(IMAGE)/manifests/$$TAG --stderr - | docker run -i --rm $(REGISTRY)/2gis/jq:1.5 '.history[0].v1Compatibility|fromjson|.created' --raw-output` ; \
        echo "Image $(REGISTRY)/$(IMAGE):$$TAG was created at $$IMAGE_CREATED" ; \
        DIFF_TIME=`expr $CURRENT_TIME - $$(date --date="$$IMAGE_CREATED" +"%s")` ; \
        if [ $$DIFF_TIME -gt $(TIME_LIFE_IMAGE) ]; then \
          echo "Delete $(REGISTRY)/$(IMAGE):$$TAG from registry ..." ; \
          SHA=`curl -sS -X GET -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -I https://$(REGISTRY)/v2/$(IMAGE)/manifests/$$TAG --stderr - \
            | grep Docker-Content-Digest | awk '{print $$2}' | tr -d '\n\r'` ; \
          echo "Docker-Content-Digest: $$SHA" ; \
          [ -z "$$SHA" ] || curl -sS -X DELETE -I -S https://$(REGISTRY)/v2/$(IMAGE)/manifests/$$SHA \
        fi ; \
      done;
  tags: [ docker-engine, io ]

cleanup:registry:host:
  <<: *cleanup_registry_template
  stage: end
  when: always
  variables:
    GIT_STRATEGY: none
    IMAGE: roads/broadway-host
    TAG_MASK: "branch-"
    TIME_LIFE_IMAGE: "604800" # 7 days
  dependencies: []

cleanup:registry:silo:
  <<: *cleanup_registry_template
  stage: end
  when: always
  variables:
    GIT_STRATEGY: none
    IMAGE: roads/broadway-silo
    TAG_MASK: "branch-"
    TIME_LIFE_IMAGE: "604800" # 7 days
  dependencies: []

cleanup:runner:
  stage: end
  when: always
  variables:
    GIT_STRATEGY: none
  script:
    - export IMAGE=roads/broadway-host
    - >
      TAGS=`docker images -a | tr -s ' ' | grep "^$(REGISTRY)/$(IMAGE)" | awk '{print $$2}' | sort | uniq | grep -v '<none>'` ; \
      for TAG in $$TAGS; do \
        CONTAINERS=`docker ps -f "ancestor=$(REGISTRY)/$(IMAGE):$$TAG" --all -f "status=exited" -f "status=dead" | grep -v 'CONTAINER ID'` ; \
        echo "Docker stopped containers list for $(REGISTRY)/$(IMAGE):$$TAG :" ; \
        echo "$$CONTAINERS" ; \
        echo "=========" ; \
        [ -z "$$CONTAINERS" ] && continue ; \
        printf '%s\n' "$$CONTAINERS" | while IFS= read -r CONTAINER_INFO; do \
          set $$CONTAINER_INFO ; \
          CONTAINER_ID=$$1 ; \
          docker rm -v $$CONTAINER_ID ; \
        done ; \
      done ;
  dependencies: []
  tags: [ docker-engine, io ]
