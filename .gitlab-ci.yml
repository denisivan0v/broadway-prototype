variables:
  REGISTRY: "docker-hub.2gis.ru"

stages:
  - build
  - dockerize
  - deploy
  - end

before_script:
  - export APPLICATION=`make -s print-APPLICATION`
  - source ${CI_PROJECT_DIR}/ci-starter-kit/utils.sh
  - export CI_TAG=`[[ -z ${CI_COMMIT_TAG} ]] && echo "branch-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA:0:8}" || echo "${CI_COMMIT_TAG}"`

# ================= Test & Build =================

build:apps:
  image: $REGISTRY/microsoft/aspnetcore-build:2.0.6-2.1.101
  stage: build
  when: always
  script:
    - dotnet restore --runtime debian-x64
    - dotnet publish src/Broadway.Host --configuration Release --runtime debian-x64 --output ../../publish/broadway-host
    - dotnet publish src/Broadway.Silo --configuration Release --runtime debian-x64 --output ../../publish/broadway-silo
  tags: [ 2gis, docker ]
  artifacts:
    name: "${CI_COMMIT_REF_NAME}_app"
    expire_in: '1 week'
    paths:
      - publish/broadway-host/
      - publish/broadway-silo/
      
build:broadway-host-image:
  stage: dockerize
  when: manual
  allow_failure: false
  script:
    - TAG=$CI_TAG DOCKER_FILE=publish/broadway-host/Dockerfile DOCKER_BUILD_CONTEXT=publish/broadway-host make docker-build
    - TAG=$CI_TAG make docker-push
  tags: [ docker-engine, io ]
  dependencies:
    - build:apps

build:broadway-silo-image:
  stage: dockerize
  when: manual
  allow_failure: false
  script:
    - TAG=$CI_TAG DOCKER_FILE=publish/broadway-silo/Dockerfile DOCKER_BUILD_CONTEXT=publish/broadway-silo make docker-build
    - TAG=$CI_TAG make docker-push
  tags: [ docker-engine, io ]
  dependencies:
    - build:apps
    
# ================ Deploy =================

deploy:prototype:
  stage: deploy
  when: manual
  image: $REGISTRY/2gis-io/k8s-handle:latest
  script:
    - export ROADS_ENVIRONMENT=Stage
    - export DOMAIN_POSTFIX=${CI_COMMIT_REF_SLUG} TEMP_DIR=${CI_PROJECT_DIR}/k8s_deploy
    - k8s-handle deploy --config config-prototype.yaml --section deploy-storage --sync-mode true --tries 120
  only:
    - tags
  dependencies: []
  tags: [ 2gis, docker ]
  environment:
    name: vstore-standalone
    url: http://${CI_ENVIRONMENT_SLUG}.web-staging.2gis.ru/swagger
      
# ================= End =================

cleanup:registry:
  stage: end
  when: always
  script:
    - make docker-registry-images-cleanup TAG="branch-" TIME_LIFE_IMAGE=604800 # 7 days
  dependencies: []
  tags: [ docker-engine, io ]

cleanup:runner:
  stage: end
  when: always
  script:
    - make docker-containers-cleanup
    - make docker-images-cleanup TAG="branch-" TIME_LIFE_IMAGE=86400 # 4 days
  dependencies: []
  tags: [ docker-engine, io ]