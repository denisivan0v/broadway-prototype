stages:
  - test
  - test:functional
  - deploy
  - end

before_script:
  - export APPLICATION=`make -s print-APPLICATION`
  - source ${CI_PROJECT_DIR}/ci-starter-kit/utils.sh
  - export BRANCH_NAME=`echo ${CI_BUILD_REF_NAME} | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g' | sed -e 's/[^a-z0-9-]//g'`
  - export GIT_SHA=`git rev-parse --short=8 HEAD`
  - export CI_DEV_TAG="dev-${BRANCH_NAME}-${GIT_SHA}"
  - export CI_TAG="branch-${BRANCH_NAME}-${GIT_SHA}"

# ================= Test & Build =================

.test: &test_template
  stage: test
  tags: [ docker-engine, io ]

test:unit:
  <<: *test_template
  variables:
    TIME_LIMIT_APP_TEST: "120"
  script:
    - time-limit ${TIME_LIMIT_APP_TEST} make docker-app-test TAG=${CI_DEV_TAG}

test:lint:
  <<: *test_template
  variables:
    TIME_LIMIT_APP_LINT: "120"
  script:
    - time-limit ${TIME_LIMIT_APP_LINT} make docker-app-lint TAG=${CI_DEV_TAG}

build:
  <<: *test_template
  environment: build
  variables:
    TIME_LIMIT_APP_INSTALL: "300"
  script:
    - time-limit ${TIME_LIMIT_APP_INSTALL} make docker-app-install TAG=${CI_DEV_TAG}
    - make docker-build-prod-image docker-push TAG=${CI_TAG}
    - sed -i.bak '/ENTRYPOINT/d' Dockerfile # TODO: remove after remove deis v1
    - make docker-build-prod-image docker-push TAG="${CI_TAG}-deis-v1"  # TODO: remove after remove deis v1
  artifacts:
    name: "${CI_PROJECT_NAME}_${CI_BUILD_REF}"
    expire_in: '1 week'
    paths:
      - ${CI_PROJECT_DIR}/bin

# ================= Tests functional =================

healthcheck:
  stage: test:functional
  script:
    - make docker-pull docker-healthcheck TAG=${CI_TAG}
  dependencies: []
  tags: [ docker-engine, io ]

# ================ Deploy =================

deploy:deis-staging:
  stage: deploy
  environment: staging
  only:
    - master
  variables:
    TIME_LIMIT_DEPLOY_STAGING: "240"
  script:
    - >
      time-limit ${TIME_LIMIT_DEPLOY_STAGING}
      make docker-run-deis-client
      deis2-config-create DEIS_PROFILE=staging DEIS2_USERNAME=${DEIS2_STAGE_USERNAME} DEIS2_TOKEN=${DEIS2_STAGE_TOKEN}
      deis2-create deis2-config-push
      deis2-perms-create
      deis2-memory-limits-set deis2-cpu-limits-set deis2-healthchecks-set
      deis2-pull deis2-scale
      deis2-info deis2-config-list deis2-perms-list deis2-limits-list deis2-healthchecks-list deis2-processes-check DEIS_PROFILE=staging DEIS2_ENV_FILE=env/staging TAG=${CI_TAG}
  dependencies: []
  tags: [ docker-engine, io ]

.deploy:production_template: &deploy_production_template
  stage: deploy
  environment: production
  when: manual
  only:
    - master
  dependencies: []
  tags: [ docker-engine, io ]

deploy:prod-n3:
  <<: *deploy_production_template
  variables:
    DEIS_CONTROLLER_PROD_N3: "http://deis.n3.nato/"
    DEIS_MEMORY_LIMITS_PROD_N3: "cmd=256M"
    DEIS_SCALE_PROD_N3: "cmd=2"
  script:
    - >
      make docker-run-deis-v1-client
      deis-config-create DEIS_PROFILE=production-n3 DEIS_CONTROLLER=${DEIS_CONTROLLER_PROD_N3} DEIS_USERNAME=${DEIS_PROD_N3_USERNAME} DEIS_TOKEN=${DEIS_PROD_N3_TOKEN}
      deis-create deis-memory-limits-set DEIS_PROFILE=production-n3 DEIS_MEMORY_LIMITS="${DEIS_MEMORY_LIMITS_PROD_N3}"
      deis-config-push deis-pull deis-scale deis-info deis-apps-check DEIS_PROFILE=production-n3 DEIS_ENV_FILE=env/prod_n3 TAG="${CI_TAG}-deis-v1" DEIS_SCALE="${DEIS_SCALE_PROD_N3}"

# ================= End =================

tag:latest:
  stage: end
  only:
    - master
  script:
    - make docker-pull TAG=${CI_TAG}
    - make docker-tag docker-push TAG_ORIG=${CI_TAG} TAG=latest
  dependencies: []
  tags: [ docker-engine, io ]

cleanup:registry:
  stage: end
  when: always
  only:
    - master
  script:
    - make docker-registry-images-cleanup TAG="master-" TIME_LIFE_IMAGE=604800 # 7 days
    - make docker-registry-images-cleanup TAG="branch-" TIME_LIFE_IMAGE=604800 # 7 days
  dependencies: []
  tags: [ docker-engine, io ]

cleanup:runner:
  stage: end
  when: always
  only:
    - master
  script:
    - make docker-containers-cleanup
    - make docker-images-cleanup TAG="master-" TIME_LIFE_IMAGE=86400 # 1 day
    - make docker-images-cleanup TAG="branch-" TIME_LIFE_IMAGE=345600 # 4 days
    - make docker-images-cleanup TAG="dev-" TIME_LIFE_IMAGE=345600 # 4 days
  dependencies: []
  tags: [ docker-engine, io ]
