REGISTRY ?= docker-hub.2gis.ru
VENDOR ?=
ifeq ($(strip $(VENDOR)),)
    $(error VENDOR variable is not set!)
endif
ifeq ($(strip $(APPLICATION)),)
    $(error APPLICATION variable is not set!)
endif
IMAGE ?= $(VENDOR)/$(APPLICATION)
TAG ?= latest

TIME_LIFE_IMAGE ?= 604800 # 7 days

DOCKER_FILE ?= Dockerfile
DOCKER_BUILD_CONTEXT ?= .
DOCKER_BUILD_ARG ?=
DOCKER_RUN_ARGS ?= -i --rm
DOCKER_RUN_APP_PATH ?= /var/www/$(VENDOR)/$(APPLICATION)
DOCKER_RUN_WORKDIR ?= $(DOCKER_RUN_APP_PATH)/$(WORKDIR)
DOCKER_RUN_ENV ?=
DOCKER_RUN_VOLUMES ?=
DOCKER_RUN_PORT ?= 5000
DOCKER_HEALTHCHECK_WAIT ?= 15s
DOCKER_HEALTHCHECK_ENV_FILE ?= $(APPLICATION_PATH)/$(WORKDIR)/env/staging
DOCKER_SAVE_IMAGE ?= image.tar
DOCKER_LOAD_IMAGE ?= $(DOCKER_SAVE_IMAGE)

DOCKER_INSTALL_ENV ?=

run-in-docker = docker run -w $(DOCKER_RUN_WORKDIR) $(DOCKER_RUN_ARGS) $(DOCKER_RUN_ENV) $(DOCKER_RUN_VOLUMES) $(REGISTRY)/$(IMAGE):$(TAG) $1

#.PHONY: docker-run-example
#docker-run-example:
	#$(call run-in-docker,echo \"Hi! It s docker-run-example was run!\")

JQ := docker run -i --rm $(REGISTRY)/2gis/jq:1.5

.PHONY: docker-build
docker-build:
	docker build --pull --rm $(DOCKER_BUILD_ARG) --tag "$(REGISTRY)/$(IMAGE):$(TAG)" -f "$(DOCKER_FILE)" $(DOCKER_BUILD_CONTEXT)

.PHONY: docker-pull
docker-pull:
	docker pull "$(REGISTRY)/$(IMAGE):$(TAG)"

.PHONY: docker-clean-containers
docker-containers-cleanup:
	@TAGS=`docker images -a | tr -s ' ' | grep "^$(REGISTRY)/$(IMAGE)" | awk '{print $$2}' | sort | uniq | grep -v '<none>'` ; \
	for TAG in $$TAGS; do \
		CONTAINERS=`docker ps -f "ancestor=$(REGISTRY)/$(IMAGE):$$TAG" --all -f "status=exited" -f "status=dead" | grep -v 'CONTAINER ID'` ; \
		echo "Docker stopped containers list for $(REGISTRY)/$(IMAGE):$$TAG :" ; \
		echo "$$CONTAINERS" ; \
		echo "=========" ; \
		[ -z "$$CONTAINERS" ] && continue ; \
		printf '%s\n' "$$CONTAINERS" | while IFS= read -r CONTAINER_INFO; do \
			set $$CONTAINER_INFO ; \
			CONTAINER_ID=$$1 ; \
			docker rm -v $$CONTAINER_ID ; \
		done ; \
	done ;

.PHONY: docker-rmi
docker-rmi:
	@DOCKER_IMAGE="$(REGISTRY)/$(IMAGE):$(TAG)"; \
	IMAGE_EXISTS=`docker images -a | tr -s ' ' ':' | grep "^$$DOCKER_IMAGE"`; \
	[ -z "$$IMAGE_EXISTS" ] || docker rmi --force $$(docker images --quiet "$$DOCKER_IMAGE") ;

.PHONY: docker-tag
docker-tag:
	docker tag "$(REGISTRY)/$(IMAGE):$(TAG_ORIG)" "$(REGISTRY)/$(IMAGE):$(TAG)"

.PHONY: docker-push
docker-push:
	docker push "$(REGISTRY)/$(IMAGE):$(TAG)"

.PHONY: docker-kill
docker-kill:
	docker kill "$(CONTAINER_ID)"

.PHONY: docker-port
docker-port: HOST_FILTER ?= | sed 's/0\.0\.0\.0\://'
docker-port:
	@docker port "$(CONTAINER_ID)" "$(PORT)" $(HOST_FILTER)

.PHONY: docker-cp
docker-cp:
	docker cp $(SRC) $(DEST)

.PHONY: docker-save
docker-save:
	docker save -o $(DOCKER_SAVE_IMAGE) $(REGISTRY)/$(IMAGE):$(TAG)

.PHONY: docker-load
docker-load:
	docker load -i $(DOCKER_LOAD_IMAGE)

.PHONY: docker-healthcheck
docker-healthcheck: DOCKER_RUN_ARGS = -i -d --env-file=$(DOCKER_HEALTHCHECK_ENV_FILE) --name=$(CONTAINER_NAME) --network=$(NETWORK_NAME)
docker-healthcheck: IMAGE_DOCKERIZE = $(REGISTRY)/2gis/dockerize:0.3.0
docker-healthcheck:
	$(eval HASH=$(shell cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1))
	$(eval CONTAINER_NAME=docker-healthcheck-app-$(HASH))
	$(eval NETWORK_NAME=docker-healthcheck-isolated-nw-$(HASH))
	docker network create -d bridge $(NETWORK_NAME) 1> /dev/null
	$(call run-in-docker,) 1> /dev/null
	docker run -i --network=$(NETWORK_NAME) $(IMAGE_DOCKERIZE) dockerize -wait http://$(CONTAINER_NAME):$(DOCKER_RUN_PORT)$(HEALTHCHECK_PATH) -timeout $(DOCKER_HEALTHCHECK_WAIT) ; \
	exitCode=$$? ; \
	  docker rm -f -v $(CONTAINER_NAME) 1> /dev/null ; \
	  docker network rm $(NETWORK_NAME) 1> /dev/null ; \
	exit $$exitCode;

.PHONY: docker-registry-rmi
docker-registry-rmi:
	@SHA=`curl -sS -X GET \
		-H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
		-I https://$(REGISTRY)/v2/$(IMAGE)/manifests/$(TAG) --stderr - \
		| grep Docker-Content-Digest | awk '{print $$2}' | tr -d '\n\r'` ; \
	echo "Docker-Content-Digest: $$SHA" ; \
	[ -z "$$SHA" ] || curl -sS -X DELETE -I -S https://$(REGISTRY)/v2/$(IMAGE)/manifests/$$SHA \

.PHONY: docker-registry-image-tags-list
docker-registry-image-tags-list:
	@curl -sS -X GET \
		https://$(REGISTRY)/v2/$(IMAGE)/tags/list --stderr - | $(JQ) '.tags|.[]' --raw-output

.PHONY: docker-registry-image-creation
docker-registry-image-creation:
	@curl -sS -X GET \
		-H "Accept: application/vnd.docker.distribution.manifest.v1+json" \
		https://$(REGISTRY)/v2/$(IMAGE)/manifests/$(TAG) --stderr - | $(JQ) '.history[0].v1Compatibility|fromjson|.created' --raw-output

.PHONY: docker-registry-images-cleanup
docker-registry-images-cleanup:
	@echo 'Run docker registry images cleanup...' ; \
	CURRENT_TIME=`date +%s` ; \
	TAGS=`$(MAKE) -s docker-registry-image-tags-list IMAGE=$(IMAGE) | grep "^$(TAG)"` ; \
	echo "Tags list for $(REGISTRY)/$(IMAGE):" ; \
	echo "$$TAGS" | awk '{printf "%d) %s\n", NR, $$0}' ; \
	echo '=========' ; \
	[ -z "$$TAGS" ] && exit 0 ; \
	for TAG in $$TAGS; do \
		IMAGE_CREATED=`$(MAKE) -s docker-registry-image-creation IMAGE=$(IMAGE) TAG=$$TAG` ; \
		echo "Image $(REGISTRY)/$(IMAGE):$$TAG was created at $$IMAGE_CREATED" ; \
		DIFF_TIME=`expr $$CURRENT_TIME - $$(date --date="$$IMAGE_CREATED" +"%s")` ; \
		if [ $$DIFF_TIME -gt $(TIME_LIFE_IMAGE) ]; then \
			echo "Delete $(REGISTRY)/$(IMAGE):$$TAG from registry ..." ; \
			$(MAKE) -s docker-registry-rmi IMAGE=$(IMAGE) TAG=$$TAG ; \
		fi ; \
	done;

.PHONY: docker-images-cleanup
docker-images-cleanup:
	@echo 'Run docker images cleanup...' ; \
	CURRENT_TIME=`date +%s` ; \
	IMAGES=`docker images -a | tr -s ' ' | grep "$(REGISTRY)/$(IMAGE) $(TAG)"` ; \
	echo 'Docker images list for $(REGISTRY)/$(IMAGE):' ; \
	echo "$$IMAGES" | awk '{printf "%d) %s\n", NR, $$0}' ; \
	echo '=========' ; \
	[ -z "$$IMAGES" ] && exit 0 ; \
	printf '%s\n' "$$IMAGES" | while IFS= read -r IMAGE_INFO; do \
		set $$IMAGE_INFO ; \
		IMAGE_ID=$$3 ; \
		TAG=$$2 ; \
		if [ ! -z "$$(docker images -a | grep $$IMAGE_ID)" ]; then \
			IMAGE_CREATED=`docker inspect -f '{{.Created}}' $$IMAGE_ID` ; \
			echo "Image $(REGISTRY)/$(IMAGE):$$TAG was created at $$IMAGE_CREATED" ; \
			DIFF_TIME=`expr $$CURRENT_TIME - $$(date --date="$$IMAGE_CREATED" +"%s") + 10` ; \
			if [ $$DIFF_TIME -gt $(TIME_LIFE_IMAGE) ]; then \
				echo "Delete $(REGISTRY)/$(IMAGE):$$TAG from docker..." ; \
				$(MAKE) -s docker-rmi IMAGE=$(IMAGE) TAG=$$TAG || /bin/true; \
			fi ; \
		fi ; \
	done ;


# docker-run-deis-client allow run deis cli in clean Linux
# Example:
# 	make docker-run-deis-client deis-info DEIS_PROFILE=dev
.PHONY: docker-run-deis-client
docker-run-deis-client: override IMAGE = 2gis-io/deis-client
docker-run-deis-client: override TAG = latest
docker-run-deis-client: DOCKER_RUN_VOLUMES = -v $(APPLICATION_PATH):$(DOCKER_RUN_APP_PATH):ro
docker-run-deis-client: docker-pull
	$(call run-in-docker,make $(filter-out $@,$(MAKECMDGOALS)) $(MAKEOVERRIDES) )

.PHONY: docker-run-deis-v1-client
docker-run-deis-v1-client: override IMAGE = 2gis/deis-client
docker-run-deis-v1-client: override TAG = 1.13
docker-run-deis-v1-client: DOCKER_RUN_VOLUMES = -v $(APPLICATION_PATH):$(DOCKER_RUN_APP_PATH):ro
docker-run-deis-v1-client: docker-pull
	$(call run-in-docker,make $(filter-out $@,$(MAKECMDGOALS)) $(MAKEOVERRIDES) )

# docker-run-dind-client allow run docker cli in clean Linux
# Example:
# 	make docker-run-dind-client docker version
.PHONY: docker-run-dind-client
docker-run-dind-client: override IMAGE = 2gis/alpine
docker-run-dind-client: override TAG = base-3.4
docker-run-dind-client: DOCKER_RUN_VOLUMES = \
					-v $$(which docker):/bin/docker \
					-v /var/run/docker.sock:/var/run/docker.sock \
					-v $(APPLICATION_PATH):$(DOCKER_RUN_APP_PATH):ro
docker-run-dind-client: DOCKER_RUN_ENV = $(addprefix -e, $(MAKEOVERRIDES))
docker-run-dind-client: docker-pull
	$(call run-in-docker,bash -c "$(filter-out $@,$(MAKECMDGOALS))")

.PHONY: docker-run-perf
docker-run-perf: override IMAGE = 2gis/loadtest
docker-run-perf: override TAG = latest
docker-run-perf: DOCKER_RUN_CMD = --label="$(PERF_LABEL)" --cause="$(PERF_CAUSE)" --timeout=$(PERF_TIMEOUT) $(PERF_PROJECT) $(PERF_TOKEN)
docker-run-perf:
	@$(MAKE) docker-pull REGISTRY=$(REGISTRY) IMAGE=$(IMAGE) TAG=$(TAG)
	$(call run-in-docker,$(DOCKER_RUN_CMD))
